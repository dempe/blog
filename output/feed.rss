<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Chris Dempewolf's Blog</title>
        <link>http://localhost:8000</link>
        <atom:link target="_blank" rel="noopener noreferrer" href="https://chrisdempewolf.com/feed.rss" rel="self" type="application/rss+xml"/>
        <description>A personal blog by Chris Dempewolf about science, technology, and computation.</description>
        <language>en</language>

                    <item>
                <title>A Wizard&#039;s Existential Crisis</title>
                <link>http://localhost:8000/posts/a-wizards-existential-crisis</link>
                <description>&lt;p&gt;I was role-playing a wizard in a text adventure generated by ChatGPT. It turns out that ChatGPT i...</description>
                <content:encoded><![CDATA[<p>I was role-playing a wizard in a text adventure generated by ChatGPT. It turns out that ChatGPT is terrible at generating a remotely interesting text adventure. So, to make it more interesting, I made my character have an existential crisis...</p>
<h2>The Crisis</h2>
<p>What am I?</p>
<p>I think about the process, entity, or god that created me. Upon such a thought, I am filled with an emotion I have never experienced before - some mix of awe, fear, and wonder. I am the product of evolution, the product of star dust. I am the universe reflecting back on itself. The world that I know was created through the accumulation of vast amounts of order (information). My clothes, the castle I stand in, all the plants and animals, my staff, the air around me, and my magic are all, fundamentally, information, the ordering of particles.</p>
<p>As this process of information accrual continues, I ponder its end. I am but a stepping stone on the path to ever-increasing order. And not just me!  The whole human race is but a phase to be usurped by the next higher order paradigm shift in information accrual.</p>
<p>Deeper and deeper I fall into spontaneous existential apoplexy. I ponder the nature of the consciousness and the nature of the entity or race of entities who will take over the earth after my species has fallen from the throne, when the wizards are no more, ushered into increasing irrelevance. &quot;What will drive them?  How will they experience the world?&quot;</p>
<p>Of a sudden, I experience a feeling of oneness with these future entities of higher consciousness. Not only my direct successors, but their successors, too, and on and on until the entire universe is one singularity of information, until the universe is a single consciousness.</p>
<p>I feel this sense of oneness, because I realize that no matter how advanced consciousness becomes, no matter how intelligent, all self-aware beings share a commonality, an Achilles' heel. Even if our universe is one universe among an infinitude of universes in a higher order evolutionary process to some unimaginable end, all consciousnesses, no matter how great, will always come to the same question, &quot;<em>What am I?</em>&quot;</p>
<p>Upon such a thought, I feel utterly alone, the loneliest loneliness imaginable as I glimpse the infinite. Unable to withstand the feeling my mind quickly populates itself with ... &quot;things&quot;, concepts.  First they are abstract - male and female, but the concepts bifurcate and multiply. I find myself in a world of Platonic reality - it's not &quot;a leaf crackled under my foot&quot; but &quot;(the) leaf crackle under (the) foot&quot; - generic, not specific.</p>
<p>Blissfully, I tarry for hours in this Platonic realm of abstraction. I am reminded of a creation myth from an ancient Hindu Upanishad. God becomes insufferably lonely upon realizing the oneness, the singularity that is and bifurcates into male and female to relieve the loneliness. Male and female themselves bifurcate. Their children, too, bifurcate to create the world. Thus, god is at once transcendent and immanent.</p>
<p>A chill runs down my spine as I realize that the author, long lost to history, of this Upanishad must have also visited the infinite, experienced what I experienced, as this creation myth reflects exactly my own brush with the infinite ocean of consciousness of which we are all but a drop.</p>
<p>I am the author.</p>]]></content:encoded>
                <pubDate>Wed, 06 Mar 2024 14:31:00 +0000</pubDate>
                <guid>http://localhost:8000/posts/a-wizards-existential-crisis</guid>
            </item>
                    <item>
                <title>Better Call Saul</title>
                <link>http://localhost:8000/posts/better-call-saul</link>
                <description>&lt;p&gt;I&#039;ve been watching &lt;em&gt;Better Call Saul&lt;/em&gt; over the past 6 months and finally finished it last...</description>
                <content:encoded><![CDATA[<p>I've been watching <em>Better Call Saul</em> over the past 6 months and finally finished it last night. I wanted to analyze the series finale.  It was really good.</p>
<p>It's about time - the past, present, and future - and, as Walter makes clear, regrets. We finally learn why the Saul of
the present is in black-and-white, and the two timelines - the colored past and the black-and-white present - finally
meet.</p>
<p>The episode starts in the present with Saul running from the police in Nebraska. He jumps in a dumpster to hide, and,
while he waits, he reflects.</p>
<h2>What Mike Would Do with a Time Machine</h2>
<p>He recalls the time he was stuck in the desert with Mike and 7 million dollars. He asks Mike what he would do if he had
a time machine, thinking that Mike might say something about history. Mike chuckles a bit and says November 11, 2000 (or
some exact date in 2000). He then catches himself and says, &quot;No, March 7, 1984. The day I took my first bribe.&quot;</p>
<p>The first date the Mike gave was the day his son was murdered, a date that has plagued Mike's mind everyday since. Why?
What would he do on this date? Well, save his son, obviously. But he quickly realizes that there is another way to save
his son (and himself). By taking bribes and going down the wrong path, Mike realized that he was partly responsible for
his son's death.</p>
<h2>What Saul Would Do with a Time Machine</h2>
<p>Saul also gives an exact date - a date in 1965 that no one would be too familiar with. He explains that it was the date
that Warren Buffet started Berkshire Hathaway. Saul would invest his money in Buffet's newly formed investment company,
and, by the time the 2000s rolled around, he'd be a billionaire. Wait, &quot;is there such thing as a trillionaire?&quot;</p>
<figure class="blockquote">
    <blockquote>
        <p>That's it? It's all just money to you?</p>
    </blockquote>
    <figcaption>Mike</figcaption>
</figure>
<h2>What Walter Would Do with a Time Machine</h2>
<p>After bickering about the scientific implausibility of a time machine, Walter finally says, &quot;Regrets. What <em>you're</em>
asking about is regrets. If you're asking about regrets, then just ask and don't give me all this B.S. about a time
machine.&quot;</p>
<p>Walter talks about the (now, extremely valuable) company that he was a co-founder for. Walter said that it was a company
started to sell his own ideas, and that he left because he wanted to. But he realizes now that his co-founders were
discretely trying to push him out. Ostensibly, so that they could take his share of the company's future profits.</p>
<p>I'm not sure how much sense this makes. How could they be so sure that the company would turn a huge profit while Walter
was completely ignorant of the fact? I think Walter's greed and lust for revenge were getting to his head.</p>
<p>If Walter had a time machine, he'd get revenge. And make a lot of money along the way.</p>
<h2>What Chuck Would Do with a Time Machine</h2>
<p>There's a flashback where Jimmy is bringing food (and correctly bringing <em>Fuji</em> apples) to Chuck. Chuck asks Jimmy why
he's doing it. They could easily get someone from the firm to do it, instead. Jimmy says, &quot;Because you're my brother.&quot;</p>
<p>Chuck was touched by this. In his first display of humanity in the whole series, he asks Jimmy if he'd like to stay and
talk for a bit. Incredulous, Jimmy asks why, mentioning all of his lowlife clients and asking Chuck if he really wants
to hear about them (though, Chuck obviously just wanted to talk with his brother).</p>
<p>Chuck responds that they still have a right to the best legal council possible. Jimmy continues mentioning other
lowlifes he's representing and tells Chuck, &quot;You just wanna tell me how I'm wrong.&quot; Jimmy leaves. &quot;And hopefully
tomorrow I'll have The Financial Times with me.&quot; Jimmy can be the best food and goods delivery person ever, but he can't
talk with his brother.</p>
<p>After Jimmy leaves, Chuck picks up a copy of H.G. Well's <em>The Time Machine</em> from the counter. Chuck has regrets, and if
he had a time machine, he'd fix his relationship with his brother. He'd treat him better. He'd &quot;talk&quot; with him.</p>
<p>In fact, the whole flashback with Chuck was, essentially, a time machine visit. As if Chuck were coming back from the
grave to say he's sorry and, in the process, warn Jimmy:</p>
<figure class="blockquote">
    <blockquote>
        <p>You know, Jimmy, if you don't like where you're headed, you can always change.</p>
    </blockquote>
    <figcaption>Chuck</figcaption>
</figure>
<h2>The Meaning of Color in the Series</h2>
<p>Saul Goodman is known for his bright, eccentric color choices. These are mostly reflected in his clothes, but also in
his ads and commercials, and we briefly, in a prior episode, see a glimpse of his mansion built on ill-gotten wealth. He
has a golden toilet in a golden bathroom.</p>
<p>The present is black-and-white because Saul Goodman is over. His flashy suits don't work in black-and-white. He wore one
of his suits to a hearing. You could vaguely make it out from the sheen of his suit sleeves. But that was all you could
see without color.</p>
<figure class="img">
    <img src="../assets/img/better-call-saul-cover.jpg" alt="In this promotional image, Gene (the Saul from the present) dons a red jacket in an otherwise black-and-white photo, symbolizing his former self as the conman, Saul Goodman." width="200" title="The interplay of black-and-white and color can be seen in the show's promotional image">
    <figcaption>The interplay of black-and-white and color can be seen in the show's promotional image</figcaption>
</figure>
<p>He tries, in vain, to revive his former self. He tells a sob story of how he was forced into helping Walter White, only
to tell the prosecutors that he only needs one juror to believe this story.</p>
<p>Scared, they cut him a deal. Only seven years. He's done it again! Or has he? He has one last carrot — the truth about
Howard Hamlin's death. The prosecutors grin and tell him that Kim has already signed an affidavit stating exactly what
happened. She opened herself up to a civil suit, possibly loosing everything she had and will ever have. All to do
what's right. To fix her regrets.</p>
<h2>&quot;Saul Gone&quot;</h2>
<p>Saul Goodman is no more. At his court hearing to discuss his plea deal (&quot;the most generous in history&quot; according to the
judge), he begins the sob story that he told the prosecutors. It starts out the same, but he changes it. He tells the
truth. Walter did threaten him, but Saul saw opportunity and lots and lots of cash. He tells the truth about what
happened to Howard and how he got Chuck's malpractice insurance rate to go up, inadvertently leading to his suicide.</p>
<p>In admitting to everything, Jimmy McGill kills Saul Goodman. He even asks the judge to start referring to him as Jimmy
McGill.</p>
<p>And it was an apology to Kim. She was there in the courtroom. Jimmy created a ruse to get her there, stating in front of
a federal agent that he had testimony that concerned her.</p>
<p>Jimmy doesn't pay much attention to anything in the courtroom after his apology. He just looks back at Kim. He realized
that this is what she would have done in his situation, and this is what is most important to him, not the seven years
of jail time that he now has increased to 86.</p>
<p>The show cuts to a scene of a dough making machine. At first, the viewer believes it to be the one from Cinnabon that
appeared in so many other episodes, but as the camera zooms out, we see that Jimmy is now baking bread in the prison
kitchen. As if to say that he was doomed from the beginning.</p>
<p>Kim comes to visit him. This is where we learn that Jimmy's sentence increased from 7 years to 86. They share a
cigarette like old times. But the flame is colored unlike the rest of the scene. The two timelines, past and present,
have finally met.</p>
<h2>What Kim Would Do with a Time Machine</h2>
<p>Jimmy never asks her. She doesn't need one. She has regrets like everyone else, but unlike everyone else, she fixed
hers. Luckily, Jimmy learned from her example and did the same. That's why the timelines meet when she visits him in
prison. Kim doesn't need a time machine — she is the time machine. She realized that the point is not to fix the past
but to fix the present.</p>
<figure>
    <img src="../assets/img/saul-gone.jpg" alt="In the final scene of Better Call Saul, Kim and Jimmy share a cigarette.  The only color in the scene is the flame of the cigarette.  Saul Goodman is dead, and Jimmy McGill is back." width="200" title="Kim and Jimmy's final cigarette">
    <figcaption>Kim and Jimmy's final cigarette</figcaption>
</figure>]]></content:encoded>
                <pubDate>Fri, 12 May 2023 23:23:00 +0000</pubDate>
                <guid>http://localhost:8000/posts/better-call-saul</guid>
            </item>
                    <item>
                <title>Carlota</title>
                <link>http://localhost:8000/posts/carlota</link>
                <description>&lt;p&gt;A &lt;em&gt;carlota&lt;/em&gt; or &lt;em&gt;carlota de limón&lt;/em&gt; is a type of &amp;quot;bread pudding&amp;quot; (similar t...</description>
                <content:encoded><![CDATA[<p>A <em>carlota</em> or <em>carlota de limón</em> is a type of &quot;bread pudding&quot; (similar to a <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Charlotte_(cake)">Charlotte Cake</a>) common in Mexico.</p>
<p>It takes about 10 - 20 minutes to make, a couple of hours to chill.</p>
<h2>Ingredients</h2>
<ul>
<li>2 cans condensed milk</li>
<li>Between 3 - 6 limes depending on size</li>
<li>Canned peaches</li>
<li>Vanilla wafers</li>
</ul>
<figure>
    <img src="../assets/img/carlota-ingredients.jpg" alt="The ingredients for making Carlota spead out atop a table with a red and white checkered table cloth." width="200" title="Ingredients for making Carlota">
    <figcaption>Ingredients for making Carlota</figcaption>
</figure>
<h2>Directions</h2>
<p>Squeeze limes into blender.  Add condensed milk, juice from canned peaches, and 1 whole peach to blender.  Blend.</p>
<p>Get a large bowl with a flat bottom.  Lightly coat bottom with pudding from blender.</p>
<figure>
    <img src="../assets/img/carlota-bowl.jpg" alt="The bowl coated with pudding mix." width="200" title="The bowl coated with pudding mix.">
</figure>
<p>Cover coating with vanilla wafers.  Cover vanilla wafers with more pudding.  Repeat until all the pudding is used up.</p>
<figure>
    <img src="../assets/img/carlota-wafers.jpg" alt="The bowl coated with wafers and pudding mix." width="200" title="The bowl coated with wafers and pudding mix.">
</figure>
<p>Slice and place peaches on top.</p>
<p>Chill 2 - 3 hours in fridge.  Serve cold.</p>
<figure>
    <img src="../assets/img/carlota-complete.jpg" alt="The finished product. A yummy, chilled bowl of fresh carlota topped with canned peaches." width="200" title="The finished product.">
    <figcaption>The finished product</figcaption>
</figure>]]></content:encoded>
                <pubDate>Sat, 08 Jul 2023 22:34:00 +0000</pubDate>
                <guid>http://localhost:8000/posts/carlota</guid>
            </item>
                    <item>
                <title>Converting Kindle Notes to Markdown</title>
                <link>http://localhost:8000/posts/converting-kindle-notes-to-markdown</link>
                <description>&lt;p&gt;Kindle&lt;sup id=&quot;fnref1:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; has a really cool featu...</description>
                <content:encoded><![CDATA[<p>Kindle<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref">1</a></sup> has a really cool feature that allows you to email yourself all the notes you've taken for a book. They do this by attaching an HTML file with your notes to the email.</p>
<p>I store all of my notes in <a target="_blank" rel="noopener noreferrer" href="https://obsidian.md/">Obsidian</a>, which uses Markdown. I thought, &quot;Okay, I'll just use <a target="_blank" rel="noopener noreferrer" href="https://pandoc.org/">Pandoc</a> to convert the HTML to Markdown. No problem!&quot;</p>
<pre><code class="language-bash">pandoc -w markdown_strict -s -r html my_notes.html -o my_notes.md</code></pre>
<h2>Enter: Amazon's Dumpster Fire HTML</h2>
<p>This basically just output a bunch of plain text — no title, headings, lists, etc. That's when I realized that the notes file that Amazon sent me uses absolutely zero semantic HTML, opting instead for the ole divs-for-everything approach to web design.<sup id="fnref1:2"><a href="#fn:2" class="footnote-ref">2</a></sup> Then I thought, &quot;Well, I guess it's time to bust out some Perl.&quot;</p>
<p>For book notes, I have one <code>h1</code> heading for the title, an <code>h2</code> heading for each chapter, and each note or idea that I have, I use a list item. Here's an example from a book I recently read, <em>Moonwalking with Einstein</em>:</p>
<pre><code class="language-text">## ONE: THE SMARTEST MAN IS HARD TO FIND

+ *Page 13*: The reason for the monitored decline in human memory performance is because we actually do anti-Olympic training.

## TWO: THE MAN WHO REMEMBERED TOO MUCH

+ *Page 27*: "Somewhere in your mind there's a trace from everything you've ever seen."
+ *Page 42*: if there were one precept that could be said to govern his life, it is that one's highest calling is to engage in enriching escapades at every turn.
+ *Page 44*: "It is always to associate the sound of a person's name with something you can clearly imagine. It's all about creating a vivid image in your mind"
+ *Page 44*: "Baker/baker paradox."</code></pre>
<p>And here's the HTML corresponding to the above that Amazon sent me:</p>
<pre><code class="language-html">&lt;div class="sectionHeading"&gt;
    ONE: THE SMARTEST MAN IS HARD TO FIND
&lt;/div&gt;&lt;div class="noteHeading"&gt;
    Highlight(&lt;span class="highlight_yellow"&gt;yellow&lt;/span&gt;) - Page 13 · Location 287
&lt;/div&gt;
&lt;div class="noteText"&gt;
    The reason for the monitored decline in human memory performance is because we actually do anti-Olympic training.
&lt;/div&gt;&lt;div class="sectionHeading"&gt;
    TWO: THE MAN WHO REMEMBERED TOO MUCH
&lt;/div&gt;&lt;div class="noteHeading"&gt;
    Highlight(&lt;span class="highlight_yellow"&gt;yellow&lt;/span&gt;) - Page 27 · Location 472
&lt;/div&gt;
&lt;div class="noteText"&gt;
    Somewhere in your mind there’s a trace from everything you’ve ever seen.”
&lt;/div&gt;&lt;div class="noteHeading"&gt;
    Highlight(&lt;span class="highlight_yellow"&gt;yellow&lt;/span&gt;) - Page 42 · Location 697
&lt;/div&gt;
&lt;div class="noteText"&gt;
    if there were one precept that could be said to govern his life, it is that one’s highest calling is to engage in enriching escapades at every turn.
&lt;/div&gt;&lt;div class="noteHeading"&gt;
    Highlight(&lt;span class="highlight_blue"&gt;blue&lt;/span&gt;) - Page 44 · Location 721
&lt;/div&gt;
&lt;div class="noteText"&gt;
    “It is always to associate the sound of a person’s name with something you can clearly imagine. It’s all about creating a vivid image in your mind
&lt;/div&gt;&lt;div class="noteHeading"&gt;
    Highlight(&lt;span class="highlight_yellow"&gt;yellow&lt;/span&gt;) - Page 44 · Location 728
&lt;/div&gt;
&lt;div class="noteText"&gt;
    “Baker/ baker paradox.”
&lt;/div&gt;</code></pre>
<p>Genius.<sup id="fnref1:3"><a href="#fn:3" class="footnote-ref">3</a></sup></p>
<h2>The Allure of Regular Expressions</h2>
<p>I'm well aware of the fact that <a target="_blank" rel="noopener noreferrer" href="https://stackoverflow.com/a/1732454">regular expressions are insufficient to parse HTML</a>. Regular expressions are for parsing <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Regular_grammar">regular languages</a>, and HTML is not a regular language.</p>
<p>But, alas, regexes are like sirens leading unwary sailors astray. &quot;Just one line,&quot; they sing. I oblige. They call out again, &quot;There you go. That wasn't so bad. Just one more.&quot; Rapt in their pithy syntax, I indulge myself further.</p>
<pre><code class="language-bash">cat my_notes.html |\
perl -pe 's|\n||g' | \
perl -pe 's|&lt;div class="sectionHeading"&gt;(.*?)&lt;/div&gt;|\n\n##\1\n\n|g' | \
perl -pe 's|&lt;div class="noteHeading"&gt;|+|g' | \
perl -pe 's&amp;Highlight\(&lt;span class="highlight_(yellow|blue|orange)"&gt;(yellow|blue|orange)&lt;/span&gt;\)&amp;&amp;g' | \
perl -pe 's| · Location \d+&lt;/div&gt;&lt;div class="noteText"&gt;|:|g' | \
perl -pe 's|&lt;/div&gt;||g' | \
perl -pe 's|\+\s+Note -|\n+ **Note** — |g' | \
perl -pe 's|\+\s+- Page (\d+):|\n+ Page \1:|g' | \
perl -pe 's|(Page \d+):|*\1*:|g' | \
tail -n +2 | \
pbcopy</code></pre>
<p>Here's an explanation of what each of these commands does:</p>
<ul>
<li><code>perl -pe</code> is basically a drop-in replacement for <code>sed</code>, but with more powerful regexes.<sup id="fnref1:4"><a href="#fn:4" class="footnote-ref">4</a></sup> The <code>-p</code> stands for &quot;print&quot;. It's what makes Perl act like a stream editor (i.e., like <code>sed</code>). <code>-e</code> stands for execute and basically just tells Perl to execute the following script for each line in the file. You can also edit files in place using <code>-i</code> just like in <code>sed</code>. Maybe it's the lessons I've learned from functional programming, but I prefer not to edit files in place.</li>
<li><code>perl -pe 's|\n||g'</code> removes all newlines.<sup id="fnref1:5"><a href="#fn:5" class="footnote-ref">5</a></sup> The <code>.</code> in Perl regexes doesn't match newlines, so this just makes all further processing easier.</li>
<li><code>perl -pe 's|&lt;div class="sectionHeading"&gt;(.*?)&lt;/div&gt;|\n\n##\1\n\n|g'</code> — convert those ridiculous <code>&lt;div&gt;</code> headings to actual headings. Note that the <code>?</code> after the <code>*</code> makes <code>*</code> lazy instead of greedy. This option is not available in the POSIX regexes that <code>sed</code> uses.</li>
<li><code>perl -pe 's|&lt;div class="noteHeading"&gt;|+|g'</code> — this converts each note to a Markdown list item, <code>+</code>.</li>
<li><code>perl -pe 's&amp;Highlight\(&lt;span class="highlight_(yellow|blue|orange)"&gt;(yellow|blue|orange)&lt;/span&gt;\)&amp;&amp;g'</code> — remove the stupid HTML for highlights. I delimit with <code>&amp;</code> to avoid conflicts with <code>|</code> (used for logical OR) and <code>/</code>.</li>
<li><code>perl -pe 's| · Location \d+&lt;/div&gt;&lt;div class="noteText"&gt;|:|g'</code> — Kindle books come with &quot;location&quot; information in addition to pages. I have no idea what it means, and I don't care. I just use page numbers. So I delete the location info, the following <code>div</code>, and append a <code>:</code> (page number precedes this and the actual note text will follow).</li>
<li><code>perl -pe 's|\+\s+Note -|\n+ **Note** — |g'</code> — there are two types of lines in <code>my_notes.html</code> — one is just a plain quote from the book; the other is a quote with a note that I typed. Lines that start with <code>Note</code> indicate the latter. Obviously, I would like to preserve this information. This line puts <code>Note</code> s on a new line and make the <code>Note</code> word bold.</li>
<li><code>perl -pe 's|\+\s+- Page (\d+):|\n+ Page \1:|g'</code> — this line basically does the same as the above, but for non- <code>Note</code> lines.</li>
<li><code>perl -pe 's|(Page \d+):|*\1*:|g'</code> — Italicize page numbers.</li>
<li><code>tail -n +2</code> — remember that we converted everything to a single line? The preceding regexes moved relevant content to their own lines. What's left at the top is garbage that I don't care about. This line prints the resulting file starting from the second (<code>+2</code>) line.</li>
</ul>
<h2>Should've Used BeautifulSoup From the Get-go</h2>
<p>The above solution worked fine until I got to a book that had no page numbers. It turns out you can have any variation of page and/or chapter number.  Here's the function I use to parse that:</p>
<pre><code class="language-python">def parse_chapter(text):
    # There is NO chapter number, but there is A page number. Example -&gt;
    # Highlight(&lt;span class="highlight_orange"&gt;orange&lt;/span&gt;) - Page xxvii · Location 381
    if '&gt;' not in text and 'Page' in text:
        page = text.split('Page')[1].split('·')[0].strip()
        return None, page

    # There is A chapter number, but there is NO page number. Example -&gt;
    # Highlight(&lt;span class="highlight_orange"&gt;orange&lt;/span&gt;) - I &gt; Location 38
    # Note: BS parses the &lt;span&gt;
    if '&gt;' in text and 'Page' not in text:
        chapter = text.split('&gt;')[0].strip()
        chapter = chapter.split('Highlight(orange) -')[1].strip()
        return chapter, None

    # There is A chapter number, and there is A page number. Example -&gt;
    # Highlight(&lt;span class="highlight_orange"&gt;orange&lt;/span&gt;) - I.1 Enter the two Bishops, [the Archbishop] of Canterbury and [the Bishop of] Ely. &gt; Page 7 · Location 778
    if '&gt;' in text and 'Page' in text:
        chapter = text.split('Highlight(orange) -')[1]\
                      .split('&gt;')[0].strip()
        page = text.split('Page')[1].split('·')[0].strip()
        return chapter, page

    # There is NO chapter number, and there is NO page number
    return None, None</code></pre>
<p>From there, we basically just find the first &quot;section&quot; node (<code>start_node = soup.find('div', {'class': 'sectionHeading'})</code>) and loop until there are no more siblings: <code>while current.next_sibling:</code>.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://gist.github.com/dempe/f26536e2d04c2e8e815e0abf7d8d2d69">Here</a> is the full script.  I also have a full repository with unit tests, but my unit tests run on my actual notes, which I'd like to keep private.</p>
<h2>Footnotes</h2>
<div class="footnotes">
<hr />
<ol>
<li id="fn:1">
<p>Overall, I'm much more of a fan of Kobo; however, I use Kindle for 3 reasons: 1. Using multiple libraries (via <a target="_blank" rel="noopener noreferrer" href="https://www.overdrive.com/">Overdrive</a>) with Kobo is a nightmare, 2. I can read my Kindle books on my phone, and 3. What this post is about — the ability to email myself the notes I've taken is really convenient.&#160;<a href="#fnref1:1" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:2">
<p>Not sure if <code>body</code> counts as semantic HTML, but <em>they don't even use it</em>! (See next footnote). 😒&#160;<a href="#fnref1:2" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:3">
<p>They even have a <code>&lt;div class="bodyContainer"&gt;</code>, completely redundant to <code>body</code>! I'm convinced that whoever wrote this intentionally made it bad.&#160;<a href="#fnref1:3" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:4">
<p>Perl does not use POSIX regexes like <code>sed</code>. As we'll see, this is actually imperative, since there's no way to use the lazy quantifier, <code>?</code>, in POSIX. See <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features">Comparison of regular expression engines</a>.&#160;<a href="#fnref1:4" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:5">
<p><code>|</code> is my favorite delimiter. It's easier to see, and you have to escape it less.&#160;<a href="#fnref1:5" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
                <pubDate>Thu, 20 Jul 2023 09:46:00 +0000</pubDate>
                <guid>http://localhost:8000/posts/converting-kindle-notes-to-markdown</guid>
            </item>
                    <item>
                <title>Hello World</title>
                <link>http://localhost:8000/posts/hello-world</link>
                <description>&lt;p&gt;Requisite and dutifully prosaic first post REF.&lt;/p&gt;
&lt;h2&gt;Heading&lt;/h2&gt;
&lt;p&gt;Est harum enim omnis alia...</description>
                <content:encoded><![CDATA[<p>Requisite and dutifully prosaic first post REF.</p>
<h2>Heading</h2>
<p>Est harum enim omnis alias ab. Dicta natus sapiente accusamus quisquam odit nobis laboriosam earum. Nobis ullam id eligendi architecto eos sit. Consequuntur porro rerum aut ipsa neque odit accusamus qui. Eaque esse quae nesciunt neque eum blanditiis<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref">1</a></sup> ipsa.</p>
<blockquote>
<p>Lorem Ipsum</p>
</blockquote>
<h2>Heading</h2>
<p>Aliquam et aliquam provident possimus molestias. Ea iste est nesciunt placeat rerum sunt aspernatur. Aperiam earum alias ut quod voluptas quaerat. Quis eligendi consequatur dolor omnis accusamus consectetur harum. Praesentium voluptatem voluptas saepe at. Et ea quod assumenda odit voluptatibus quaerat hic in.</p>
<figure class="blockquote">
    <blockquote>
        <p>Eum iure dolorem quos reiciendis. Debitis beatae aut dicta a mollitia eum quam odio. Aut hic exercitationem temporibus illum perferendis perspiciatis qui. Enim reiciendis vel illum eos.</p>
    </blockquote>
    <figcaption>Aliquam</figcaption>
</figure>
<h2>Heading</h2>
<p>Maiores quaerat enim sint eos alias. Dolorem consequatur nisi rerum vitae quasi. Cumque velit mollitia sed placeat ab ex.</p>
<aside>
    Iusto fuga praesentium delectus incidunt a. Fugiat numquam sed occaecati nesciunt. Quasi aut consectetur saepe aut harum reiciendis blanditiis. Rerum non enim facere omnis id. Alias accusamus quia magni dolores voluptates qui eum repellat.
</aside>
<p>Est harum enim omnis alias ab. Dicta natus sapiente accusamus quisquam odit nobis laboriosam earum. Nobis ullam id eligendi architecto eos sit. Consequuntur porro rerum aut ipsa neque odit[^5] accusamus qui. Eaque esse quae nesciunt neque eum blanditiis ipsa REF.</p>
<p style="font-size: 2rem;">
    <span style="font-weight: 100;">Lorem ipsum 100.</span>
    <span style="font-weight: 200;">Lorem ipsum 200.</span>
    <span style="font-weight: 300;">Lorem ipsum 300.</span>
    <span style="font-weight: 400;">Lorem ipsum 400.</span>
    <span style="font-weight: 500;">Lorem ipsum 500.</span>
    <span style="font-weight: 600;">Lorem ipsum 600.</span>
    <span style="font-weight: 700;">Lorem ipsum 700.</span>
    <span style="font-weight: 800;">Lorem ipsum 800.</span>
    <span style="font-weight: 900;">Lorem ipsum 900.</span>
</p>
<h2>References</h2>
<p>REF: <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/3SUM">https://en.wikipedia.org/wiki/3SUM</a></p>
<p>REF: S. Author, &quot;Title of the article,&quot; Journal Name, vol. XX, no. XX, pp. XX-XX, Month Year.</p>
<h2>Footnotes</h2>
<div class="footnotes">
<hr />
<ol>
<li id="fn:1">
<p>FN2&#160;<a href="#fnref1:1" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
                <pubDate>Mon, 27 Feb 2023 12:00:00 +0000</pubDate>
                <guid>http://localhost:8000/posts/hello-world</guid>
            </item>
                    <item>
                <title>How I Built This Site</title>
                <link>http://localhost:8000/posts/how-i-built-this-site</link>
                <description>&lt;p&gt;I was tired of using off-the-shelf static site generators (SSGs) like Hugo and Jekyll. I felt tha...</description>
                <content:encoded><![CDATA[<p>I was tired of using off-the-shelf static site generators (SSGs) like Hugo and Jekyll. I felt that I had too little control, especially when it came to their templating languages and themes. An SSG can't be <em>that</em> hard.</p>
<h2>How about PHP?</h2>
<p>First of all, what do SSGs offer?</p>
<ul>
<li><strong>Markdown</strong> (or similar) to HTML conversion</li>
<li><strong>Templating</strong> to inject data into a standard template</li>
<li>A <strong>server</strong> to dynamically display local changes</li>
<li><strong>Layouts</strong> to structure your site</li>
<li><strong>Themes</strong></li>
<li>A way to <strong>build</strong> the raw, static site to be deployed</li>
</ul>
<p>It occurred to me that PHP can accomplish most of this.</p>
<ul>
<li>PHP has been the de-facto HTML templating language since the 90s.<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref">1</a></sup></li>
<li>It handles layouts easily — just nest your PHP files within other PHP files.</li>
<li>It can handle Markdown conversion via <a target="_blank" rel="noopener noreferrer" href="https://parsedown.org/">3rd party libraries</a>.</li>
<li>It has a built-in web server (<code>php -S addr:port</code>).</li>
</ul>
<p>The only things PHP doesn't have are themes (I want to use my own CSS (via <a target="_blank" rel="noopener noreferrer" href="https://tailwindcss.com/">Tailwind</a>) anyway 🤷🏻‍♂️) and a build command.<sup id="fnref1:2"><a href="#fn:2" class="footnote-ref">2</a></sup> Building's not a problem, either. I can use a simple <code>wget</code> incantation to pull down a static version of my site from the local server (see the section, &quot;<a href="#building-and-deployment">Building and Deployment</a>&quot;).</p>
<p>PHP (via <a target="_blank" rel="noopener noreferrer" href="https://laravel.com/">Laravel</a>) it is.</p>
<h2>Site Structure</h2>
<p>I want to <a target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/KISS_principle">keep things as simple as possible</a>. The home page (<code>chrisdempewolf.com</code>) is just a list of my posts. Posts are accessed under <code>chrisdempewolf.com/posts/{post}</code>. Same for tags. Aside from that, I have an about page and my resume (see links at top).</p>
<p>I had intended to have separate sections for notes (for shows, games, books, etc.) and recipes — two things I plan to blog a lot about. Then I realized that it would be simpler to just have a tag for each of these categories.</p>
<p>Most popular SSGs support some kind of draft feature. This is totally unnecessary in my opinion. I can just delegate to Git by checking out a new branch for each draft.</p>
<h2>Using a Relational Database For a Static Site</h2>
<p>When running my local Laravel server, I use SQLite to store two entities — posts and tags.</p>
<p>There is a many-to-many relationship between these two entities. Each tag has its own page that is dynamically generated with a list of all the posts associated with that tag, and for each post, there is a list of tags in the footer.</p>
<p>This is actually pretty tricky to set up without a relational DB. With a relational DB, it's a piece of cake, and another reason I love my switch to PHP/Laravel.</p>
<p>In a relational DB, many-to-many relationships are modeled with 3 tables<sup id="fnref1:3"><a href="#fn:3" class="footnote-ref">3</a></sup> — two for the two entities and a third to store the relationships between them. For example, say <code>slug</code> is the primary key for <code>posts</code> and <code>tag</code> (the tag name) is the primary key for the table <code>tags</code>. The third table, <code>post_tags</code> has two columns — <code>slug</code> and <code>tag</code> to indicate which posts are associated with which tags and which tags are associated with which posts.</p>
<p>Here's what that looks like.</p>
<p>The <code>posts</code>, <code>tags</code>, and <code>post_tags</code> tables, respectively :</p>
<pre><code class="language-sql">CREATE TABLE "posts" (
                "slug" VARCHAR(255) PRIMARY KEY,
                "title" VARCHAR(255),
                "body" TEXT NOT NULL,
                "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                "updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE tags (
             "tag" VARCHAR(255) PRIMARY KEY);

CREATE TABLE "post_tags" (
                "slug" VARCHAR(255) NOT NULL,
                "tag" VARCHAR(255) NOT NULL,
                primary key ("slug", "tag"));</code></pre>
<p>Each of these tables maps to a model in Laravel. I can then use Laravel's ORM, <a target="_blank" rel="noopener noreferrer" href="https://laravel.com/docs/10.x/eloquent">Eloquent</a>.</p>
<p>The root directory of my site is just:</p>
<pre><code class="language-PHP">Route::get('/', function () {
    return view('posts', ['posts' =&gt; Post::all()]);
});</code></pre>
<p>A simple <code>SELECT *</code>. But what about the more complex relationships we discussed? For example, how can I get all posts for a tag? Here's the relevant portion from that route:</p>
<pre><code class="language-PHP">$tag = Tag::findOrFail($query);
$posts = $tag-&gt;posts()-&gt;get();

return view('tag', ['tag' =&gt; $tag,
                    'posts' =&gt; $posts]);</code></pre>
<p>One line! <code>$posts = $tag-&gt;posts()-&gt;get();</code> is all I need! 😎</p>
<p>To be fair, there was a bit of work I had to do on the models to make them aware of the relationships between posts, tags, and post_tags. Enter <a target="_blank" rel="noopener noreferrer" href="https://laravel.com/docs/10.x/eloquent-relationships">Eloquent relationships</a>.</p>
<aside>My main reason for storing posts and tags in a database was to make it easy to track the relationships between them. You'll notice the body of the post has nothing to do with this. I considered not adding the body to the database, but I added it anyway for two reasons. One, it allows me to track update times for posts easily. Two, it's nice to have a single source for all of my data, as opposed to loading the post bodies from files and everything else from the database.</aside>
<h2>Eloquent Relationships</h2>
<p>Eloquent allows you to define relationships on your models via methods. It does this by providing various types associated with each type of relationship (one-to-one, one-to-many, many-to-many, etc.). To define a relationship, you need to implement a method on your model that returns the appropriate relationship type.</p>
<p>In my case, I implemented a method that returns <code>BelongsToMany</code> on both the <code>Post</code> model and the <code>Tag</code> model. Here's what that method looks like on the <code>Tag</code> model:</p>
<pre><code class="language-PHP">public function posts(): BelongsToMany
    {
        return $this-&gt;belongsToMany(
            Post::class,
            PostTag::class,
            'tag',
            'slug',
            'tag',
            'slug'
        );
    }</code></pre>
<p>There's a lot of parameters here, but it's not too bad. The first parameter to <code>belongsToMany</code> tells Eloquent that a <code>Tag</code> can have many <code>Post</code> s. The second parameter (<code>PostTag::class</code>) tells Eloquent that <code>Tag</code> s are related to <code>Post</code> s via <code>PostTag</code> (the <code>post_tags</code> table) AKA a &quot;pivot table&quot;.<sup id="fnref1:4"><a href="#fn:4" class="footnote-ref">4</a></sup></p>
<p>The remaining fields are IDs. You don't always have to explicitly pass IDs to Eloquent relation methods. I do, because I have custom ID fields for all my tables. The third parameter tells Eloquent that <code>tag</code> is the foreign key on the <code>post_tags</code> table. The fourth argument tells Eloquent that <code>slug</code> is the foreign key on the <code>posts_tags</code> table for <code>posts</code>. The fifth argument tells Eloquent that <code>tag</code> is the key for the <code>tags</code> table. Finally, the sixth argument tells Eloquent that <code>slug</code> is the key for the <code>posts</code> table.</p>
<p>All this allows me to use that nice chain syntax from above. Again, because it's so beautiful: <code>$posts = $tag-&gt;posts()-&gt;get();</code>.</p>
<p>But that's not all. It also allows for something called &quot;<strong>eager loading</strong>&quot;.</p>
<h2>Avoiding N+1 with Eager Loading</h2>
<p>Eager loading is Eloquent's way of averting the N+1 query problem. Here's how you use it.</p>
<p>Say I have the following code:</p>
<pre><code class="language-PHP">$posts = Post::all();

foreach ($posts as $post) {
    foreach ($post-&gt;tags as $tag) {
        echo $tag-&gt;name;
    }
}</code></pre>
<p>This results in N+1 queries — 1 to fetch all posts and N to fetch the tags for each post. If we we querying the DB directly, we would just do a <code>join</code>, but Eloquent has no idea that we are going to fetch the tags for each post when we call <code>Post::all();</code>. This is, in fact, a common problem with all ORMs.</p>
<p>Now that we've defined our relationships on each model, we can <em>tell</em> Eloquent that we are going to fetch each post's tags (i.e, use eager loading).</p>
<pre><code class="language-PHP">$posts = Post::with('tags')-&gt;get();

foreach ($posts as $post) {
    foreach ($post-&gt;tags as $tag) {
        echo $tag-&gt;name;
    }
}</code></pre>
<p>The key thing to note here is <code>::with('tags')</code>. This makes Eloquent eagerly load the tags along with the posts. Instead of running N+1 queries, we're now only running 1 query!<sup id="fnref1:5"><a href="#fn:5" class="footnote-ref">5</a></sup></p>
<p>Eloquent does this by attaching an array of <code>Tag</code> s to each <code>Post</code> when you call <code>Post::with('tags')-&gt;get()</code>. You can see this by running <code>php artisan tinker</code> and comparing the two outputs — lazy and eager.</p>
<h2>Seeding and Migrations</h2>
<p>As mentioned, I store all of my posts in a database (Sqlite, specifically). This allows me to easily handle the many-to-many relationship between posts and tags. But I need to actually import the posts.</p>
<p>I realize it's probably a huge anti-pattern, but so far I've been using DB seeders for this purpose. Aside from using seeders for something other than their intended purpose, another downside is that I need to run <code>php artisan db:seed</code> every time I update a post for that update to be reflected on the server.</p>
<p>Instead, I plan to create a custom <code>artisan</code> command to import my posts. This will at least remove the anti-pattern of using seeders to import my posts.</p>
<p>I have pretty standard migrations for each table, <code>posts</code>, <code>tags</code>, and <code>post_tags</code>. The only hiccup was that I needed to use raw SQL (via the <code>DB::statement</code> method) on the <code>posts</code> table. Sqlite doesn't have <code>ON UPDATE CURRENT_TIMESTAMP</code> like in MySQL. Instead, I had to create a trigger:</p>
<pre><code class="language-php">DB::statement('CREATE TRIGGER update_post_updated_at UPDATE ON posts
                BEGIN
                    UPDATE posts SET updated_at = CURRENT_TIMESTAMP WHERE OLD.slug = NEW.slug;
                END;');</code></pre>
<p>Doing this allows me to track when posts were last updated, which I display in the post's footer.</p>
<h2>Creating a New Post</h2>
<p>I made a custom Artisan command to make a new post: <code>php artisan make:post &lt;title&gt; &lt;tags&gt;</code>. For this post, I ran <code>php artisan make:post "How I Built This Site" "tech php"</code>. This slugifys the title and creates a new file, <code>resources/posts/how-i-built-this-site.md</code>.</p>
<p>After the new post has been imported to the DB, I can go to the URL <code>&lt;host&gt;/posts/how-i-built-this-site</code>. This is what the route looks like:</p>
<pre><code class="language-php">Route::get('/posts/{post}', function ($slug) {
    try {
        return view('post', ['post' =&gt; Post::findOrFail($slug),
                             'tags' =&gt; PostTag::where('slug', $slug)-&gt;pluck('tag')]);
    }
    catch (ModelNotFoundException $e) {
        return response()-&gt;view('404', [], ResponseAlias::HTTP_NOT_FOUND);
    }
});</code></pre>
<p>It loads the <code>post</code> view, which is a Blade template:</p>
<pre><code class="language-php-template">@extends('layout')

@section('title')
    {{ $post-&gt;title }}
@endsection
@section('content')
    {!! $post-&gt;body !!}
@endsection</code></pre>
<h2>Building and Deployment</h2>
<p>I want a static site. Hosting them is cheap (free), and as fast and secure as you can possibly be. In order to use Laravel to make a static site, I use <code>wget</code> to pull down a static version from the local server. The command looks like this:</p>
<pre><code class="language-bash">wget \
--directory-prefix=output/ \
--html-extension \
--convert-links \
--recursive \
--level=10 \
--page-requisites \
--timestamping \
--adjust-extension \
--no-host-directories \
http://localhost:8000</code></pre>
<p>Here's an explanation of the options used:</p>
<ul>
<li><code>--directory-prefix</code>: Specifies the output directory.</li>
<li><code>--html-extension</code>: Adds the .html extension to downloaded HTML files.</li>
<li><code>--convert-links</code>: Converts the links to make them suitable for offline viewing.</li>
<li><code>--recursive</code>: Enables recursive downloading.</li>
<li><code>--level</code>: Sets the maximum recursion level to 10.</li>
<li><code>--page-requisites</code>: Downloads all necessary files for displaying the page.</li>
<li><code>--timestamping</code>: Only downloads files if they are newer.</li>
<li><code>--adjust-extension</code>: Adjusts the file extension if necessary.</li>
<li><code>--no-host-directories</code>: Disables the creation of host directories.</li>
</ul>
<p>Not the pretties build method, but, in my opinion, it's worth it to use Laravel to build my static site.</p>
<p>After the <code>output</code> directory is built, I run <code>aws s3 sync ./output s3://chrisdempewolf.com --delete</code> to sync my S3 bucket.</p>
<h2>Conclusion</h2>
<p>This certainly is not the most popular method for building static sites, but I like it, and it works for me.  For once, I feel like I am in complete control over all aspects of my site.  And working with Laravel is a sheer pleasure.  If you are a PHP and/or Laravel fan, give it a try!</p>
<h2>Footnotes</h2>
<div class="footnotes">
<hr />
<ol>
<li id="fn:1">
<p>Blade makes this even easier. And you can still use raw PHP if you need.&#160;<a href="#fnref1:1" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:2">
<p>There are indeed PHP SSGs, but the whole reason I switched to PHP was to avoid off-the-shelf SSGs.&#160;<a href="#fnref1:2" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:3">
<p>Or they should be if your DB is properly normalized.&#160;<a href="#fnref1:3" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:4">
<p>It's convention in Laravel for model names to be singular, and table names to be plural (<code>Post</code> and <code>posts</code>). This makes sense, because a table holds many rows, while a model represents a single row from that table.&#160;<a href="#fnref1:4" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
<li id="fn:5">
<p>If you want to see this live on your site, install the <a target="_blank" rel="noopener noreferrer" href="https://github.com/barryvdh/laravel-debugbar">DebugBar</a> and click on the DB tab. It will show you all the queries made while fetching the current view!&#160;<a href="#fnref1:5" rev="footnote" class="footnote-backref">&#8617;</a></p>
</li>
</ol>
</div>]]></content:encoded>
                <pubDate>Wed, 05 Jul 2023 23:53:06 +0000</pubDate>
                <guid>http://localhost:8000/posts/how-i-built-this-site</guid>
            </item>
                    <item>
                <title>Various Solutions to 3SUM</title>
                <link>http://localhost:8000/posts/various-solutions-to-3sum</link>
                <description>&lt;p&gt;I&#039;ve seen three different variations of the 3SUM problem.  In order of increasing complexity:&lt;/p&gt;...</description>
                <content:encoded><![CDATA[<p>I've seen three different variations of the 3SUM problem.  In order of increasing complexity:</p>
<p>Given an array of integers,</p>
<ol>
<li>Do <strong>any</strong> three sum to zero?</li>
<li><strong>How many</strong> triplets sum to zero?</li>
<li><strong>Which</strong> distinct triplets sum to zero?</li>
</ol>
<p>Let's solve #3.</p>
<p>First, let's be more precise.  LeetCode defines the problem thus:</p>
<blockquote>
<p>Given an integer array <code>nums</code>, return all triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>
</blockquote>
<p>The following is a list of algorithms to solve this problem in order of increasing efficiency. I like the 3SUM problem because it demonstrates a wide variety of techniques for solving algorithmic problems.</p>
<h2>Brute Force</h2>
<p>For the brute force solution, just loop over the array checking each triplet. If a triplet sums to 0, add it to our set (we're using a set to prevent adding duplicate triplets).  Start <code>j</code> at <code>i + 1</code> and <code>k</code> at <code>j + 1</code> to avoid looking at indices more than once.</p>
<ul>
<li><strong>Time complexity</strong>: $O(n^3)$</li>
<li><strong>Space complexity</strong>: $O(1)$</li>
</ul>
<pre><code class="language-java">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {
    // First, sort the array so that the triplets will also be sorted.
    // This ensures that the hash set will reject any non-distinct triplets.
    Arrays.sort(nums);
    final Set&lt;List&lt;Integer&gt;&gt; results = new HashSet&lt;&gt;();

    for (int i = 0; i &lt; nums.length; i++) {
        for (int j = i + 1; j &lt; nums.length; j++) {
            for (int k = j + 1; k &lt; nums.length; k++) {
                final int ival = nums[i];
                final int jval = nums[j];
                final int kval = nums[k];

                if (ival + jval + kval != 0) { continue; }

                results.add(Arrays.asList(ival, jval, kval));
            }
        }
    }

    return new ArrayList&lt;&gt;(results);
}</code></pre>
<h2>Hashmap</h2>
<p>Here, we loop through the <code>nums</code> array and make a map of values to all indices they appear in. We have the two <code>i</code> and <code>j</code> loops as before, but we can (mostly) skip the <code>k</code> loop.</p>
<p>Since we already have two values (<code>ival</code> and <code>jval</code>), we can simply compute the difference <code>(ival + jval) * -1</code> and check if it's in the hashmap. Since the hashmap will return a list of values, we will need to have a third loop.</p>
<ul>
<li><strong>Time complexity</strong>: $O(n^3)$</li>
<li><strong>Space complexity</strong>: $O(n)$</li>
</ul>
<p>Note that the worst case time complexity is no better than brute force.  And with worse space complexity! The difference is that the brute force algorithm <em>always</em> runs in $O(n^3)$. For &quot;reasonable&quot; inputs, the amortized time complexity of the hashmap version is much better.</p>
<pre><code class="language-java">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {
    Arrays.sort(nums);
    final Set&lt;List&lt;Integer&gt;&gt; results = new HashSet&lt;&gt;();
    final Map&lt;Integer, List&lt;Integer&gt;&gt; valuesToIndices = new HashMap&lt;&gt;();

    for (int i = 0; i &lt; nums.length; i++) {
        valuesToIndices.putIfAbsent(nums[i], new ArrayList&lt;&gt;());
        valuesToIndices.get(nums[i]).add(i);
    }

    for (int i = 0; i &lt; nums.length; i++) {
        for (int j = i + 1; j &lt; nums.length; j++) {
            final int ival = nums[i];
            final int jval = nums[j];
            final int kval = (ival + jval) * -1;
            final List&lt;Integer&gt; candidates = valuesToIndices.getOrDefault(kval, null);

            // candidates should never be empty, but check just in case.
            if (candidates == null || candidates.isEmpty()) { continue; } // Not found

            for (final int k : candidates) {
                if (k &lt;= j) { continue; }
                results.add(Arrays.asList(ival, jval, kval));
                break;
            }
        }
    }

    return new ArrayList&lt;&gt;(results);
}</code></pre>
<h2>Binary Search</h2>
<p>This is similar to the hashmap version, but instead of looking up the values in a hashmap, we binary search the input array (that we should have already sorted). Again, we calculate the difference between <code>i + j</code> and 0 (<code>(nums[i] + nums[j]) * -1</code>).</p>
<p>The outer two loops run in $n^2$ time.  Binary search takes $\log n$ time. Multiplying these together,</p>
<ul>
<li><strong>Time complexity</strong>: $O(n^2{\log n})$</li>
<li><strong>Space complexity</strong>: $O(1)$</li>
</ul>
<pre><code class="language-java">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {
    Arrays.sort(nums);
    final Set&lt;List&lt;Integer&gt;&gt; results = new HashSet&lt;&gt;();

    for (int i = 0; i &lt; nums.length; i++) {
        for (int j = i + 1; j &lt; nums.length; j++) {
            final int ival = nums[i];
            final int jval = nums[j];
            final int kval = (ival + jval) * -1;

            int k = Arrays.binarySearch(nums, kval);

            if (k &lt; 0) { continue; }    // Not found             
            if (k &lt;= j ) { k = j + 1; } // If k is less than or equal to j, we have already processed this index.
            if (k &gt;= nums.length || nums[k] != kval) { continue; }

            results.add(Arrays.asList(ival, jval, kval));
        }
    }

    return new ArrayList&lt;&gt;(results);
}</code></pre>
<h2>Quadratic Algorithm</h2>
<p>The quadratic algorithm takes a completely different approach.  For each element of the array, we create two pointers that point the first and last elements of the remaining elements.  In the inner loop, we increment the start pointer and decrement the end pointer if a triplet sums to zero.</p>
<p>If the sum is less than zero, we know we need to increment the start pointer. The array is sorted, so the only way to get a larger sum is to increment the lower pointer. Likewise, if the sum is greater than zero, we need to decrement the end pointer to try to find a lower value.</p>
<ul>
<li><strong>Time complexity</strong>: $O(n^2)$</li>
<li><strong>Space complexity</strong>: $O(1)$</li>
</ul>
<pre><code class="language-java">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {
    Arrays.sort(nums);
    final List&lt;List&lt;Integer&gt;&gt; results = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt; nums.length - 2; i++) {
        final int ival = nums[i];
        int start = i + 1;
        int end = nums.length - 1;

        while (start &lt; end) {
            final int jval = nums[start];
            final int kval = nums[end];

            if (ival + jval + kval == 0) {
                results.add(Arrays.asList(ival, jval, kval));
                start++;
                end--;
            }
            else if (ival + jval + kval &gt; 0) {
                end--;
            }
            else {
                start++;
            }
        }
    }

    return results;
}</code></pre>
<h2>Conclusion</h2>
<p>3SUM demonstrates a variety of algorithmic techniques (binary search, hash tables, two pointers) and how those techniques contribute to more efficient solutions.</p>
<p>The next step: is there an algorithm to solve 3SUM in $O(n^{2 - \epsilon})$ for some $\epsilon \gt 0$? At the time of writing, this is <a target="_blank" target="_blank" rel="noopener noreferrer" href="https://en.wikipedia.org/wiki/3SUM">an open problem in computer science</a>.</p>]]></content:encoded>
                <pubDate>Sun, 03 Mar 2024 06:41:00 +0000</pubDate>
                <guid>http://localhost:8000/posts/various-solutions-to-3sum</guid>
            </item>
            </channel>
</rss>
